hw3_data = read.csv("stocks.xlsx")
hw2_data = read_excel("hw2_data.csv")
hw3_data = read.csv("hw2_data.csv")
hw2_data = read_excel("stocks.xlsx")
mine_hw2 = read_excel("sp500_stock_data.xlsx")
mine_hw3 = read_excel("data_holding.xlsx")
names(hw3_data)
names(mine_hw3)
?merge
install.packages("compare")
library(compare)
library(compare)
comp_hw2 = compare(hw2_data,mine_hw2,allowAll = T)
head(comp_hw2)
?write.csv
write.csv(comp_hw2,file="comp_hw2")
View(comp_hw2)
class(comp_hw2)
write.csv(comp_hw2[2],file="comp_hw2")
head(comp_hw2[2])
plot(hw2_data$Returns, col = "red")
points(mine_hw2$`Returns without Dividends`, col = "green")
hw2_names = names(hw2_data)
hw2_names
names(mine_hw2)
hw2_data = read.csv("hw2_data.csv")
hw3_data = read_excel("stocks.xlsx")
plot(hw2_data$Returns, col = "red")
plot(hw2_data$RETX, col = "red")
?plot
plot(hw2_data$RETX, col = "red", type = "p")
points(mine_hw2$`Returns without Dividends`, col = "green")
length(hw2_data$RETX)
?seq
x = seq(from = 1, to = length(hw2_data$RETX),by = 1)
x
plot(x,hw2_data$RETX, col = "red", type = "p")
points(mine_hw2$`Returns without Dividends`, col = "green")
plot(hw2_data$RETX, col = "red", type = "l")
lines(mine_hw2$`Returns without Dividends`, col = "green")
?merge
hw2_names = names(hw2_data)
hw2_names
names(mine_hw2)
head(hw2_data$RETX)
head(mine_hw2$`Returns without Dividends`)
hw2_data = read_excel("hw2_data.xlsx")
hw2_names = names(hw2_data)
hw2_names
plot(hw2_data$RETX, col = "red", type = "l")
lines(mine_hw2$`Returns without Dividends`, col = "green")
?plot
plot(hw2_data$RETX, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend")
lines(mine_hw2$`Returns without Dividends`, col = "green")
plot(hw2_data$RETX, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
lines(mine_hw2$`Returns without Dividends`, col = "green")
names(hw2_data)
hw3_names = names(hw3_data)
hw3_names
names(mine_hw3)
?legend
legend("upper right",legend = c("my data","peer data"), lty = "l")
legend("topright",legend = c("my data","peer data"), lty = "l")
legend("topright",legend = c("my data","peer data"), lty = c("l","l"))
legend("topright",legend = c("my data","peer data"),
lty = c(1,1), col = c("green","red"), cex = 0.8)
plot(hw2_data$RETX, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
lines(mine_hw2$`Returns without Dividends`, col = "green")
legend("topright",legend = c("my data","peer data"),
lty = c(1,1), col = c("green","red"), cex = 0.8)
head(hw2_data$date)
head(mine_hw2$`Names Date`)
hw2_names
names(mine_hw2)
peerR = hw2_data[,c("date","RETX")]
mineR = mine_hw2[,c("Names Date","Returns without Dividends")]
names(mineR) = names(peerR)
head(peerR)
head(mineR)
comb_hw2R = merge(peerR,mineR,by = "date")
plot(peerR$date, peerR$RETX, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
plot(peerR$RETX, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
which(peerR$date == mineR$date[1])
length(peerR$RETX)
length(mineR$RETX)
which(peerR$RETX == mineR$date[1])
which(peerR$RETX == mineR$date[10])
which(peerR$RETX == mineR$RETX[1])
which(peerR$RETX == mineR$RETX[10])
which(peerR$RETX == mineR$RETX[100])
which(peerR$RETX == mineR$RETX[10000])
which(peerR$RETX == mineR$RETX[100000000])
which(peerR$RETX == mineR$RETX[1000000])
which(peerR$RETX == mineR$RETX[100000])
which(peerR$RETX == mineR$RETX[200000])
mean(peerR$RETX)
mean(mineR$RETX)
peerR = peerR[complete.cases(peerR),]
mineR = peerR[complete.cases(mineR),]
mineR = mineR[complete.cases(mineR),]
mean(peerR$RETX)
mean(mineR$RETX)
sd(mineR$RETX)
sd(peerR$RETX)
names(hw2_data)
names(mine_hw2)
peerR = hw2_data[,c("PERMNO","date","RETX")]
mineR = mine_hw2[,c("PERMNO","Names Date","Returns without Dividends")]
names(mineR) = names(peerR)
#monte carlo
peerN = length(peerR$RETX)
mineN = length(mineR$RETX)
n = 10000
PeerSample = sample(1:peerN,n, replace = F)
MineSample = sample(1:mineN,n, replace = F)
PeerSample
names(hw3_data)
names(mine_hw3)
plot(hw3_data$Returns, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
lines(mine_hw3$Returns, col = "green")
legend("topright",legend = c("my data","peer data"),
lty = c(1,1), col = c("green","red"), cex = 0.8)
plot(mine_hw3$Returns, col = "red", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
lines(hw3_data$Returns, col = "green")
legend("topright",legend = c("my data","peer data"),
lty = c(1,1), col = c("green","red"), cex = 0.8)
plot(mine_hw3$Returns, col = "green", type = "l",
xlab = "time period", ylab = "return without dividend",
main = "Data Comparision")
lines(hw3_data$Returns, col = "red")
legend("topright",legend = c("my data","peer data"),
lty = c(1,1), col = c("green","red"), cex = 0.8)
peerR3 = hw3_data[,c("PERMNO","Names Date","Returns")]
mineR3 = mine_hw3[,c("PERMNO","Names Date","Returns")]
names(mineR3) = names(peerR3)
peerR_hw3 = peerR3[complete.cases(peerR3),]
mineR_hw3 = mineR3[complete.cases(mineR3),]
mean(peerR_hw2$RETX)
mean(mineR_hw2$RETX)
sd(peerR_hw2$RETX)
sd(mineR_hw2$RETX)
peerR_hw3 = peerR3[complete.cases(peerR3),]
mineR_hw3 = mineR3[complete.cases(mineR3),]
mean(peerR_hw3$RETX)
mean(mineR_hw3$RETX)
sd(peerR_hw3$RETX)
sd(mineR_hw3$RETX)
peerR3 = hw3_data[,c("PERMNO","Names Date","Returns")]
mineR3 = mine_hw3[,c("PERMNO","Names Date","Returns")]
names(mineR3) = names(peerR3)
peerR_hw3 = peerR3[complete.cases(peerR3),]
mineR_hw3 = mineR3[complete.cases(mineR3),]
mean(peerR_hw3$RETX)
mean(peerR_hw3$Returns)
mean(mineR_hw3$Returns)
sd(peerR_hw3$Returns)
sd(mineR_hw3$Returns)
peerR_hw3 = peerR3[complete.cases(peerR3),]
mean(peerR_hw3$Returns)
peerR3
peerR_hw3 = peerR3[complete.cases(peerR3),]
mean(peerR_hw3$Returns)
sum(is.na(peerR_hw3$Returns))
peerR_hw3$Returns
mineR_hw3$Returns
peerR3
mean(as.numeric(peerR_hw3$Returns))
as.numeric(peerR_hw3$Returns)
mean(as.numeric(peerR_hw3$Returns))
peerR_hw3 = as.numeric(peerR3[complete.cases(peerR3),])
sum(is.na(as.numeric(peerR_hw3$Returns)))
complete.cases(peerR3)
peerR_hw3$Returns
peerR3
peerR_hw3
mineR_hw3$Returns
peerR_hw3$Returns
hw3_data = read_excel("stocks.xlsx")
peerR3 = hw3_data[,c("PERMNO","Names Date","Returns")]
peerR_hw3 = peerR3[complete.cases(peerR3),]
peerR_hw3$Returns
as.numeric(peerR_hw3$Returns)
peerR_hw3 = peerR3[complete.cases(peerR3),]
temp = as.numeric(peerR_hw3$Returns)
temp = temp[complete.cases(temp)]
mean(temp)
mean(mineR_hw3$Returns)
sd(peerR_hw3$Returns)
sd(mineR_hw3$Returns)
sd(temp)
peerR_hw3 = peerR3[complete.cases(peerR3),]
temp = as.numeric(peerR_hw3$Returns)
peerR_hw3 = peerR_hw3[complete.cases(temp),]
peerR_hw3
mean(peerR_hw3$Returns)
mean(as.numeric(peerR_hw3$Returns))
peerR_hw3 = peerR3[complete.cases(peerR3),]
temp = as.numeric(peerR_hw3$Returns)
peerR_hw3 = peerR_hw3[complete.cases(temp),]
peerR_hw3$Returns = as.numeric(peerR_hw3$Returns)
peerR_hw3 = peerR3[complete.cases(peerR3),]
temp = as.numeric(peerR_hw3$Returns)
peerR_hw3 = peerR_hw3[complete.cases(temp),]
peerR_hw3$Returns = as.numeric(peerR_hw3$Returns)
mineR_hw3 = mineR3[complete.cases(mineR3),]
mean(peerR_hw3$Returns)
mean(mineR_hw3$Returns)
sd(peerR_hw3$Returns)
sd(mineR_hw3$Returns)
library(lubridate)
library(moments)
options(warn = -1)
data = hw3_data
data = data[complete.cases(data),]
data$MC = abs(data$`Price or Bid/Ask Average`)*data$`Shares Outstanding`
test = data[order(data$PERMNO),]
test$`Names Date` = as.Date(as.character(test$`Names Date`), format = "%Y%m%d")
n = length(data$PERMNO)
nS = length(unique(test$PERMNO))
len = vector()
sep = vector()
name = vector()
MC = vector()
Year = vector()
mc = test$MC[1]
X = 1+test$Returns[1]
count = 1
for (i in 1:(n-1))
{
if (test$PERMNO[i+1] == test$PERMNO[i] &&
year(test$`Names Date`[i+1]) == year(test$`Names Date`[i]))
{
X = X*(1+test$Returns[i+1])
count = count + 1
mc = mc + test$MC[i+1]
}
else
{
len = append(len,count)
Y = X^(12/count)-1
sep = append(sep,Y)
name = append(name,test$`Ticker Symbol`[i])
MC = append(MC, mc/count)
Year = append(Year,year(test$`Names Date`[i+1]))
X = 1 + test$Returns[i+1]
count = 1
mc = test$MC[i+1]
}
}
full = data.frame(Year,name,MC/1000,sep)
quant = quantile(sep, probs = seq(0,1,0.01))
effect = sep[which(sep>(-0.9385828))]
effect = effect[which(effect < 8.1856168)]
write.csv(full, file = "data summary.csv")
hist(effect,breaks = 60)
summary(effect)
summary(MC /1000)
Mstd = sd(effect)
Mm = mean(effect)
Kurt = kurtosis(effect)
Skew = skewness(effect)
stat = data.frame(Mm, Mstd, Kurt, Skew)
names(stat) = c("Mean", "Standard Deviation", "Kurtosis", "Skewness")
print(stat)
data = hw3_data
data = data[complete.cases(data),]
names(data)
data$MC = abs(data$`Price or Bid/Ask Average`)*data$`Shares Outstanding`
test = data[order(data$PERMNO),]
head(test)
test$`Names Date` = as.Date(as.character(test$`Names Date`), format = "%Y%m%d")
test$`Names Date`
n = length(data$PERMNO)
nS = length(unique(test$PERMNO))
nS
n
len = vector()
sep = vector()
name = vector()
MC = vector()
Year = vector()
mc = test$MC[1]
X = 1+test$Returns[1]
X = 1+test$Returns[1]
test$Returns[1]
as.numeric(test$Returns)
temppp = as.numeric(test$Returns)
test = test[complete.cases(temppp),]
test$Returns = as.numeric(test$Returns)
mc = test$MC[1]
X = 1+test$Returns[1]
count = 1
for (i in 1:(n-1))
{
if (test$PERMNO[i+1] == test$PERMNO[i] &&
year(test$`Names Date`[i+1]) == year(test$`Names Date`[i]))
{
X = X*(1+test$Returns[i+1])
count = count + 1
mc = mc + test$MC[i+1]
}
else
{
len = append(len,count)
Y = X^(12/count)-1
sep = append(sep,Y)
name = append(name,test$`Ticker Symbol`[i])
MC = append(MC, mc/count)
Year = append(Year,year(test$`Names Date`[i+1]))
X = 1 + test$Returns[i+1]
count = 1
mc = test$MC[i+1]
}
}
full = data.frame(Year,name,MC/1000,sep)
quant = quantile(sep, probs = seq(0,1,0.01))
effect = sep[which(sep>(-0.9385828))]
effect = effect[which(effect < 8.1856168)]
write.csv(full, file = "data summary.csv")
hist(effect,breaks = 60)
summary(effect)
summary(MC /1000)
Mstd = sd(effect)
Mm = mean(effect)
Kurt = kurtosis(effect)
Skew = skewness(effect)
stat = data.frame(Mm, Mstd, Kurt, Skew)
names(stat) = c("Mean", "Standard Deviation", "Kurtosis", "Skewness")
print(stat)
options(warn = -1)
snp = hw2_data
snp$`Returns without Dividends`[is.na(snp$`Returns without Dividends`)] = 0
p.all = which(!is.na(snp$`Payment Date`))
event = snp[p.all,]
n = length(p.all)
pos = vector()
for (i in 2:n)
{
if (snp$`Ticker Symbol`[p.all[i]] != snp$`Ticker Symbol`[p.all[i]-21]
|| snp$`Ticker Symbol`[p.all[i]] != snp$`Ticker Symbol`[p.all[i]+20])
{
pos = append(pos,i)
}
}
p = p.all[-pos]
p = p[-1]
RETX = snp$`Returns without Dividends`
sprtrn = snp$`Return on the S&P 500 Index`
row_EXR = matrix(0,ncol = 41)
for (i in 1:length(p))
{
row_EXR = rbind(row_EXR,RETX[(p[i]-20):(p[i]+20)]
-sprtrn[(p[i]-20):(p[i]+20)])
}
row_EXR = row_EXR[-1,]
row_EXR[is.na(row_EXR)] = 0
mu = vector()
for (i in 1:41) { mu = append(mu,mean(row_EXR[,i]))}
X = seq(-20,20,1)
plot(X, mu, type = "o", main = "Event Study",
ylab = "Excess Return", xlab = "Day")
options(warn = -1)
snp = hw2_data
snp$RETX[is.na(snp$RETX)] = 0
p.all = which(!is.na(snp$PAYDT))
event = snp[p.all,]
n = length(p.all)
pos = vector()
for (i in 2:n)
{
if (snp$PERMNO[p.all[i]] != snp$PERMNO[p.all[i]-21]
|| snp$PERMNO[p.all[i]] != snp$PERMNO[p.all[i]+20])
{
pos = append(pos,i)
}
}
p = p.all[-pos]
p = p[-1]
RETX = snp$RETX
sprtrn = snp$RETX
row_EXR = matrix(0,ncol = 41)
for (i in 1:length(p))
{
row_EXR = rbind(row_EXR,RETX[(p[i]-20):(p[i]+20)]
-sprtrn[(p[i]-20):(p[i]+20)])
}
row_EXR = row_EXR[-1,]
row_EXR[is.na(row_EXR)] = 0
mu = vector()
for (i in 1:41) { mu = append(mu,mean(row_EXR[,i]))}
X = seq(-20,20,1)
plot(X, mu, type = "o", main = "Event Study",
ylab = "Excess Return", xlab = "Day")
options(warn = -1)
snp = hw2_data
snp$RETX[is.na(snp$RETX)] = 0
p.all = which(!is.na(snp$PAYDT))
event = snp[p.all,]
n = length(p.all)
pos = vector()
for (i in 2:n)
{
if (snp$PERMNO[p.all[i]] != snp$PERMNO[p.all[i]-21]
|| snp$PERMNO[p.all[i]] != snp$PERMNO[p.all[i]+20])
{
pos = append(pos,i)
}
}
p = p.all[-pos]
p = p[-1]
RETX = snp$RETX
sprtrn = snp$sprtrn
row_EXR = matrix(0,ncol = 41)
for (i in 1:length(p))
{
row_EXR = rbind(row_EXR,RETX[(p[i]-20):(p[i]+20)]
-sprtrn[(p[i]-20):(p[i]+20)])
}
row_EXR = row_EXR[-1,]
row_EXR[is.na(row_EXR)] = 0
mu = vector()
for (i in 1:41) { mu = append(mu,mean(row_EXR[,i]))}
X = seq(-20,20,1)
plot(X, mu, type = "o", main = "Event Study",
ylab = "Excess Return", xlab = "Day")
hist(effect,breaks = 60)
hist(effect,breaks = 60, main = "Histogram of effect (Peer)")
plot(X, mu, type = "o", main = "Event Study (Peer)",
ylab = "Excess Return", xlab = "Day")
setwd("C:/Users/Jiaqi Li/Desktop/404/hw3")
source('C:/Users/Jiaqi Li/Desktop/404/hw3/hw3.R', echo=TRUE)
setwd("C:/Users/Jiaqi Li/Desktop/404/hw3")
source('C:/Users/Jiaqi Li/Desktop/404/hw2 404/event study.R', echo=TRUE)
setwd("C:/Users/Jiaqi Li/Desktop/404/hw2 404")
source('C:/Users/Jiaqi Li/Desktop/404/hw2 404/event study.R', echo=TRUE)
print(stat)
Mstd = sd(effect)
Mm = mean(effect)
Kurt = kurtosis(effect)
Skew = skewness(effect)
setwd("C:/Users/Jiaqi Li/Desktop/404/hw5")
library(lubridate)
library(moments)
options(warn = -1)
data = hw3_data
data = data[complete.cases(data),]
data$MC = abs(data$`Price or Bid/Ask Average`)*data$`Shares Outstanding`
test = data[order(data$PERMNO),]
test$`Names Date` = as.Date(as.character(test$`Names Date`), format = "%Y%m%d")
n = length(data$PERMNO)
nS = length(unique(test$PERMNO))
len = vector()
sep = vector()
name = vector()
MC = vector()
Year = vector()
temppp = as.numeric(test$Returns)
test = test[complete.cases(temppp),]
test$Returns = as.numeric(test$Returns)
mc = test$MC[1]
X = 1+test$Returns[1]
count = 1
for (i in 1:(n-1))
{
if (test$PERMNO[i+1] == test$PERMNO[i] &&
year(test$`Names Date`[i+1]) == year(test$`Names Date`[i]))
{
X = X*(1+test$Returns[i+1])
count = count + 1
mc = mc + test$MC[i+1]
}
else
{
len = append(len,count)
Y = X^(12/count)-1
sep = append(sep,Y)
name = append(name,test$`Ticker Symbol`[i])
MC = append(MC, mc/count)
Year = append(Year,year(test$`Names Date`[i+1]))
X = 1 + test$Returns[i+1]
count = 1
mc = test$MC[i+1]
}
}
full = data.frame(Year,name,MC/1000,sep)
quant = quantile(sep, probs = seq(0,1,0.01))
effect = sep[which(sep>(-0.9385828))]
effect = effect[which(effect < 8.1856168)]
write.csv(full, file = "data summary.csv")
hist(effect,breaks = 60, main = "Histogram of effect (Peer)")
summary(effect)
summary(MC/1000)
Mstd = sd(effect)
Mm = mean(effect)
Kurt = kurtosis(effect)
Skew = skewness(effect)
stat = data.frame(Mm, Mstd, Kurt, Skew)
names(stat) = c("Mean", "Standard Deviation", "Kurtosis", "Skewness")
print(stat)
